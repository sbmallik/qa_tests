Given(/^I am on the Comics Omniture page at "(.*?)"$/) do |url|
  visit url
end

Then(/^I should see the correct Ominture account code of 'gpaper158'$/) do
	page.has_text?('s_account="gpaper158";')
end

And(/^I should see the prop17 code equal 'life'$/) do
	page.has_text?('s.prop17 = "life";')
end

And(/^I should see the prop18 code equal 'comics'$/) do
	page.has_text?('s.prop18 = "comics";')
end

And(/^I should see the prop19 code equal 'front'$/) do
	page.has_text?('s.prop19 = "front";')
end

Then(/^I should see the prop23 code equal 'http:\/\/archive\.azcentral\.com\/thingstodo\/comics\/'$/) do
  page.has_text?('s.prop23 = "http://archive.azcentral.com/thingstodo/comics/";')
end



page.driver.browser.post('/foo', data: "here")

post '/foo', data: "here"
last_response.body.should contain("Hello World")


page.execute_script("window.localStorage.clear()")
page.execute_script("window.localStorage.getItem('BestOfConfigs')")
page.body.should have_content()



    World(Rack::Test::Methods)
 
Given /^I am a valid API user$/ do
  @user = Factory(:user)
  authorize(@user.email, @user.password)
end
 
Given /^I send and accept XML$/ do
  header 'Accept', 'text/xml'
  header 'Content-Type', 'text/xml'
end
 
Given /^I send and accept JSON$/ do
  header 'Accept', 'application/json'
  header 'Content-Type', 'application/json'
end
 
When /^I send a GET request for "([^\"]*)"$/ do |path|
  get path
end
 
When /^I send a POST request to "([^\"]*)" with the following:$/ do |path, body|
  post path, body
end
 
When /^I send a PUT request to "([^\"]*)" with the following:$/ do |path, body|
  put path, body
end
 
When /^I send a DELETE request to "([^\"]*)"$/ do |path|
  delete path
end
 
Then /^the response should be "([^\"]*)"$/ do |status|
  last_response.status.should == status.to_i
end
 
Then /^the XML response should be a "([^\"]*)" array with (\d+) "([^\"]*)" elements$/ do |tag, number_of_children, child_tag|
  page = Nokogiri::XML(last_response.body)
  page.xpath("//#{tag}/#{child_tag}").length.should == number_of_children.to_i
end
 
Then /^the JSON response should be an array with (\d+) "([^\"]*)" elements$/ do |number_of_children, name|
  page = JSON.parse(last_response.body)
  page.map { |d| d[name] }.length.should == number_of_children.to_i
end